name: ci workflow
on:
  workflow_dispatch: 
  push:
    branches: [ master, ID*, ci-*, publishing-docker-images2 ]
  pull_request:
    branches: [ master, ID*]

jobs:
#   python-job:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix: { dir: ['cms', 'mibs'] } 
#     env:
#         project-path: 'src/projects'
#         cache-name: cache-requirements
#         lint-file: ${{ github.workspace }}/'src/tools/lint_conf/pylintrc'
#         ci-scripts: ${{ github.workspace }}/src/tools/ci/scripts
#         artifact-name: artifact-${{github.job}}-${{matrix.dir}}
#     steps:
#       - name: checkout repo
#         uses: actions/checkout@v2

#       - name: python setup
#         uses: actions/setup-python@v2

#       - name: cache dependencies
#         id: cache-step
#         uses: actions/cache@v2
#         with:
#             path: ~/.cache/pip
#             key: ${{ runner.os }}-pip-${{env.cache-name}}-${{ hashFiles('**/requirements.txt') }}
#             restore-keys: |
#                 ${{ runner.os }}-pip-${{env.cache-name}}
#                 ${{ runner.os }}-pip-
                
#       - name: install pylint and virtualenv
#         run: |
#             pip install pylint
#             pip install virtualenv
            
#       - name: setup virtual environment in ${{env.project-path}}/${{ matrix.dir }}
#         run: |
#             python3 -m venv env-dir
#             source env-dir/bin/activate
#         working-directory: ${{env.project-path}}/${{ matrix.dir }}
        
#       - name: install requirements
#         run: pip install -r requirements.txt 
#         working-directory: ${{env.project-path}}/${{ matrix.dir }}

#       - name: analyzing code with pylint
#         run: |
#             python3 -m pylint --rcfile ${{env.lint-file}} src
#             python3 -m pylint --rcfile ${{env.lint-file}} test
#         working-directory: ${{env.project-path}}/${{ matrix.dir }}

#       - name: testing python projects
#         run: python -m unittest discover -s ./test
#         working-directory: ${{env.project-path}}/${{ matrix.dir }}

#       - name: run coverage
#         run: |
#           pip install coverage
#           coverage run -m unittest discover ./test
#         working-directory: ${{env.project-path}}/${{ matrix.dir }}

#       - name: write job status to ci_status.json
#         if: github.event_name == 'push'
#         run: |
#           bash ./post_job_status.sh ${{matrix.dir}} ${{job.status}} ${{github.job}} 
#         working-directory: ${{env.ci-scripts}}

#       - name: upload job status artifact
#         if: github.event_name == 'push'
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{env.artifact-name}}
#           path: ${{env.ci-scripts}}/ci_status.json

#   react-native-job:
#     runs-on: ubuntu-latest
#     env:
#       cache-name: cache-node-modules
#       project-path: 'src/projects'
#       dir: "react-native"
#       node-version: 16
#       ci-scripts: ${{ github.workspace }}/src/tools/ci/scripts
#       artifact-name: artifact-${{github.job}}

#     steps:
#       - name: check out repository
#         uses: actions/checkout@v2

#       - name: react-native setup; version=${{matrix.node-version}}
#         uses: actions/setup-node@v1
#         with: 
#           node-version: ${{env.node-version}}

#       - name: cache dependencies
#         id: cache-step
#         uses: actions/cache@v2
#         with:
#             path: ~/.npm
#             key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
#             restore-keys: |
#                 ${{ runner.os }}-build-${{ env.cache-name }}-
#                 ${{ runner.os }}-build-
#                 ${{ runner.os }}-
                
#       - name: install and cache project dependencies
#         if: steps.cache-step.outputs.cache-hit != 'true'
#         run: |
#           npm install
#         working-directory: ${{env.project-path}}/${{env.dir}}

#       - name: run build
#         run: npm run build --if-present
#         working-directory: ${{env.project-path}}/${{env.dir}}
        
#       - name: run lint
#         run: |
#           npm install eslint --save-dev
#           npm run lint
#         working-directory: ${{env.project-path}}/${{env.dir}}

#       - name: run test
#         run: npm test
#         working-directory: ${{env.project-path}}/${{env.dir}}

#       - name: write job status to ci_status.json
#         if: github.event_name == 'push'
#         run: |
#           chmod +x ./post_job_status.sh
#           bash ./post_job_status.sh ${{github.job}} ${{job.status}}  
#         working-directory: ${{env.ci-scripts}}

#       - name: upload job status artifact
#         if: github.event_name == 'push'
#         uses: actions/upload-artifact@v2
#         with: 
#           name: ${{env.artifact-name}}
#           path: ${{env.ci-scripts}}/ci_status.json

#   web-job:
#     runs-on: ubuntu-latest
#     env:
#       cache-name: cache-web-node-modules
#       project-path: 'src/projects'
#       dir: "web"
#       node-version: 16
#       ci-scripts: ${{ github.workspace }}/src/tools/ci/scripts
#       artifact-name: artifact-${{github.job}}

#     steps:
#       - name: check out repository
#         uses: actions/checkout@v2

#       - name: web setup; version=${{matrix.node-version}}
#         uses: actions/setup-node@v1
#         with: 
#           node-version: ${{env.node-version}}

#       - name: install project dependencies
#         run: npm install
#         working-directory: ${{env.project-path}}/${{env.dir}}

#       - name: run build
#         run: npm run build --if-present
#         working-directory: ${{env.project-path}}/${{env.dir}}
        
#       - name: run lint
#         run: npm run lint
#         working-directory: ${{env.project-path}}/${{env.dir}}

#       - name: run test
#         run: npm test
#         working-directory: ${{env.project-path}}/${{env.dir}}

#       - name: write job status to ci_status.json
#         if: github.event_name == 'push'
#         run: |
#           chmod +x ./post_job_status.sh
#           bash ./post_job_status.sh ${{github.job}} ${{job.status}}  
#         working-directory: ${{env.ci-scripts}}

#       - name: upload job status artifact
#         if: github.event_name == 'push'
#         uses: actions/upload-artifact@v2
#         with: 
#           name: ${{env.artifact-name}}
#           path: ${{env.ci-scripts}}/ci_status.json

  docker-job:
#     needs: [ python-job, react-native-job, web-job]
    runs-on: ubuntu-latest
    strategy:
#       matrix: { dir: ['reverse-proxy', 'mibs', 'cms', 'keycloak', 'smtp-dev', 'postgres-dev', 'web'] }
      matrix: { dir: [ 'mibs','reverse-proxy'] }
    env: 
      src: 'src'
      projects: 'projects'
      latest: 'latest'
      master: 'master'
      registry: ghcr.io
      ci-scripts: ${{ github.workspace }}/src/tools/ci/scripts      
      artifact-name: artifact-${{github.job}}-${{matrix.dir}}
      registry-and-owner: ghcr.io/universityofsaskatchewancmpt371
      
    permissions: 
      contents: read
      packages: write 
    steps:
      - name: Check out repo
        uses: actions/checkout@v2 
        with:
          lfs: true
      
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set date variable (UTC)
        id: date
        run: echo ::set-output name=date::$(date +'%Y-%m-%d-t-%H-%M-%S')    
      
      - name: Set branch name
        id: branch
        run: |
         if [[ ${{ github.event_name }} == 'push' ]]; then
           echo ::set-output name=branch::${GITHUB_REF#refs/*/}
         fi
         if [[ ${{ github.event_name }} == 'pull_request' ]]; then
           echo ::set-output name=branch::${{github.base_ref}}
         fi  
         exit 0
        shell: bash 
      
      - name: Check branch name
        run: echo ${{steps.branch.outputs.branch}} 
      
      - name: Set ID branch (if neccesary)
        id: id-version
        run: |
         if [[ {{steps.branch.outputs.branch}} =~ ^[ID][0-9]$ ]]; then
          echo ::set-output name=id-version::${{steps.branch.outputs.branch}}
          echo "id-version check works"
         fi
         exit 0
        shell: bash
      
      - name: Check id-version
        run: echo ${{steps.id-version.outputs.id-version}}
      
      - name: Set working directory
        id: directory
        run: |
         if [[ ${{matrix.dir}} == 'mibs' || ${{matrix.dir}} == 'cms' || ${{matrix.dir}} == 'web' ]] ; then
           echo ::set-output name=directory::${{env.src}}
         fi
         if [[ ${{matrix.dir}} == 'reverse-proxy' || ${{matrix.dir}} == 'keycloak' || ${{matrix.dir}} == 'postgres-dev' || ${{matrix.dir}} == 'smtp-dev' ]] ; then
           echo ::set-output name=directory::${{github.workspace}}
         fi
         exit 0
        shell: bash 
      
      - name: Check working directory
        run: echo ${{steps.directory.outputs.directory}}
      
      - name: Build and publish ${{matrix.path}} docker image master branch
        run: | 
         if [[ (${{matrix.dir}} == 'mibs' || ${{matrix.dir}} == 'cms' || ${{matrix.dir}} == 'web') && ${{ steps.branch.outputs.branch }} == ${{env.master}} ]] ; then
           docker build --tag ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.latest}} --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
           docker build --tag ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}} --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
           docker build --tag ${{ env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}} --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.latest}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}}       
         fi
<<<<<<< HEAD
<<<<<<< HEAD
=======
         if [[ (${{matrix.dir}} == 'reverse-proxy' || ${{matrix.dir}} == 'keycloak' || ${{matrix.dir}} == 'postgres-dev' || ${{matrix.dir}} == 'smtp-dev') && ${{ steps.branch.outputs.branch }} == ${{env.master}} ]] ; then
=======
         if [[ ${{matrix.dir}} == 'reverse-proxy' || ${{matrix.dir}} == 'keycloak' || ${{matrix.dir}} == 'postgres-dev' || ${{matrix.dir}} == 'smtp-dev' ]] ; then
>>>>>>> 45f5401 (Update ci.yaml)
           docker build --tag ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.latest}} --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}} 
           docker build --tag ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}} --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}} 
           docker build --tag ${{ env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}} --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.latest}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}}       
         fi
<<<<<<< HEAD
>>>>>>> 6c3b0b4 (Update ci.yaml)
=======
>>>>>>> 45f5401 (Update ci.yaml)
         exit 0
        shell: bash
        working-directory: ${{steps.directory.outputs.directory}}
        
      - name: Build and publish ${{matrix.path}} docker image ID* branch
        if: ${{steps.branch.outputs.branch}} == {{steps.id-version.outputs.id-version}}
        run: | 
         if [[ (${{matrix.dir}} == 'mibs' || ${{matrix.dir}} == 'cms' || ${{matrix.dir}} == 'web') && ${{steps.branch.outputs.branch}} == {{steps.id-version.outputs.id-version}} ]] ; then
           docker build --tag ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}} --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
           docker build --tag ${{ env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}} --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}}       
         fi
         if [[ (${{matrix.dir}} == 'reverse-proxy' || ${{matrix.dir}} == 'keycloak' || ${{matrix.dir}} == 'postgres-dev' || ${{matrix.dir}} == 'smtp-dev') && ${{steps.branch.outputs.branch}} == {{steps.id-version.outputs.id-version}} ]] ; then
           docker build --tag ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}} --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}} 
           docker build --tag ${{ env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}} --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}
           docker push ${{env.registry-and-owner}}/${{matrix.dir}}:${{env.master}}${{steps.date.outputs.date}}       
         fi
         exit 0
        shell: bash
        working-directory: ${{steps.directory.outputs.directory}}
        
#       - name: Build and publish ${{matrix.path}} docker image id* branch
#         if: github.event_name == 'pull_request'
#         run: | 
#          if [[ ${{matrix.dir}} == 'mibs' || ${{matrix.dir}} == 'cms' || ${{matrix.dir}} == 'web' ]] ; then
#            docker build --tag ghcr.io/universityofsaskatchewancmpt371/${{matrix.dir}}:${{github.base_ref}}${{ steps.date.outputs.date }}  --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
#            docker push ghcr.io/universityofsaskatchewancmpt371/${{matrix.dir}}::${{github.base_ref}}${{ steps.date.outputs.date }}       
#          fi
#          exit 0
#         shell: bash
#         working-directory: ${{env.src}}        
#       - name: Build and publish ${{matrix.path}} docker image
#         run: | 
#          if [[ ${{matrix.dir}} == 'reverse-proxy' || ${{matrix.dir}} == 'keycloak' || ${{matrix.dir}} == 'postgres-dev' || ${{matrix.dir}} == 'smtp-dev' ]] ; then
#            docker build --tag ghcr.io/universityofsaskatchewancmpt371/${{matrix.dir}}:latest --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}}
#            docker push ghcr.io/universityofsaskatchewancmpt371/${{matrix.dir}}:latest
#          fi
#          exit 0
#         shell: bash
      
#       - name: write job status to ci_status.json
#         if: github.event_name == 'push'
#         run: bash ./post_job_status.sh ${{matrix.dir}} ${{job.status}} ${{github.job}} 
#         working-directory: ${{env.ci-scripts}}

#       - name: upload job status artifact
#         if: github.event_name == 'push'
#         uses: actions/upload-artifact@v2
#         with: 
#           name: ${{env.artifact-name}}
#           path: ${{env.ci-scripts}}/ci_status.json

#   smoke-test:
#     needs: [ docker-job ]
#     runs-on: ubuntu-latest
#     env: 
#       ci-scripts: ${{ github.workspace }}/src/tools/ci/scripts  
#       artifact-name: artifact-${{github.job}}
#     steps:
#       - name: checkout repo
#         uses: actions/checkout@v2
#         with:
#           lfs: true
          
#       - name: run containers
#         run: docker-compose -f docker-compose.yml up -d --build
        
#       - name: sleep for 30 seconds
#         uses: jakejarvis/wait-action@master
#         with:
#           time: '30s'

#       - name: list running containers
#         run: docker ps
        
#       - name: stop containers
#         if: always()
#         run: docker-compose -f docker-compose.yml down

#       - name: write job status to ci_status.json
#         if: github.event_name == 'push'
#         run: bash ./post_job_status.sh ${{github.job}} ${{job.status}} 
#         working-directory: ${{env.ci-scripts}}

#       - name: upload job status artifact
#         if: github.event_name == 'push'
#         uses: actions/upload-artifact@v2
#         with: 
#           name: ${{env.artifact-name}}
#           path: ${{env.ci-scripts}}/ci_status.json

#   publish-status-report-job:
#     if: github.event_name == 'push'
#     needs: [python-job, react-native-job, web-job, docker-job, smoke-test]
#     runs-on: ubuntu-latest
#     env: 
#       project-path: 'src/projects'
#       ci-scripts: ${{ github.workspace }}/src/tools/ci/scripts      
#     steps:
#       - name: checkout repo
#         uses: actions/checkout@v2

#       - name: download all artifacts
#         uses: actions/download-artifact@v2
#         with:
#           path: ${{env.ci-scripts}}

#       - name: get status report #echo report and set output
#         if: always()
#         id: report_gen
#         run: | 
#           echo -e $(bash ./status_report_gen.sh) > status.txt
#           echo "::set-output name=report::$(cat status.txt | head -n -1 | tr -d '"\r\n')"
#           echo "::set-output name=status::$(cat status.txt | tail -n 1)"
#         working-directory: ${{env.ci-scripts}}
        
#       - name: print outputs #print outputs to log
#         if: always()
#         run: |
#           echo ${{steps.report_gen.outputs.status}}
#           echo ${{steps.report_gen.outputs.report}}

#       - name: post job status report to discord #publish to discord in md format
#         if: always()
#         uses: sarisia/actions-status-discord@v1.8.6
#         with: 
#           webhook: ${{ secrets.DISCORD_WEBHOOK }}
#           title: CI STATUS REPORT
#           status: ${{steps.report_gen.outputs.status}}
#           description: |
#             ```
#             ${{steps.report_gen.outputs.report}}
#             ```
#             > Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.










      # - name: Generate python-flask modules
      #   run : |
      #    if [[ ${{matrix.dir}} == 'cms' || 
      #    ${{matrix.dir}} == 'mibs' ]]; then
      #    npm install @openapitools/openapi-generator-cli -g --save-dev --legacy-peer-deps
      #    openapi-generator-cli generate -i src/tools/api/openapi.yml -g python-flask -o src/lib/${{steps.image-name-gen.outputs.image-name}}
      #    fi
      #    exit 0
      #   shell: bash

#      env:
#        REGISTRY: ghcr.io
#        IMAGE_NAME: ${{ github.repository }}
#          - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
# --tag ${{matrix.path}}-${{GITHUB_REF##*/}}-$(date +'%Y-%m-%d-T-%H-%M-%S')


      # - name: get image name
      #   run: echo ::set-output name=image-name::$(echo $(basename "${{matrix.path}}"))
      #   id: image-name-gen

      # - name: post job status to discord
      #   if: always()
      #   uses: sarisia/actions-status-discord@v1.8.6
      #   with: 
      #     webhook: ${{ secrets.DISCORD_WEBHOOK }}
      #     nocontext: true
      #     title: ${{env.dir}} status report
      #     status: ${{job.status}}
      #     description: |
      #       Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.
      
      
      
# working-directory: ${{env.project-path}}/${{matrix.dir}}
