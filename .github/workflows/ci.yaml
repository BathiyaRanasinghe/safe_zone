name: ci workflow
    
on:
  workflow_dispatch: 
  push:
    branches: [ master, ID*]
  pull_request:
    branches: [ master, ID*]

jobs:
  preliminary-status-report-job:
    runs-on: ubuntu-latest
    steps:
      - name: Notify team that workflow has been triggered
        uses: sarisia/actions-status-discord@v1.8.6
        with: 
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          noprefix: true
          title: Workflow triggered
          nofail: false

  python-job:
    runs-on: ubuntu-latest
    needs: [preliminary-status-report-job]
    strategy:
      matrix: { dir: ['cms', 'mibs'] } 
    env:
        project-path: 'src/projects'
        cache-name: cache-requirements
        lint-file: ${{ github.workspace }}/'src/tools/lint_conf/pylintrc'
    outputs:
      status: ${{steps.get-status.outputs.status}}
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: python setup
        uses: actions/setup-python@v2

      - name: cache dependencies
        id: cache-step
        uses: actions/cache@v2
        with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{env.cache-name}}-${{ hashFiles('**/requirements.txt') }}
            restore-keys: |
                ${{ runner.os }}-pip-${{env.cache-name}}
                ${{ runner.os }}-pip-
                
      - name: install pylint and virtualenv
        run: |
            pip install pylint
            pip install virtualenv
            
      - name: setup virtual environment in ${{env.project-path}}/${{ matrix.dir }}
        run: |
            python3 -m venv env-dir
            source env-dir/bin/activate
        working-directory: ${{env.project-path}}/${{ matrix.dir }}
        
      - name: install and cache requirement dependencies
        if: steps.cache-step.outputs.cache-hit != 'true'
        run: |
            pip install -r requirements.txt 
        working-directory: ${{env.project-path}}/${{ matrix.dir }}

      - name: analyzing code with pylint
        run: |
            python3 -m pylint --rcfile ${{env.lint-file}} src
            python3 -m pylint --rcfile ${{env.lint-file}} test
        working-directory: ${{env.project-path}}/${{ matrix.dir }}

      - name: testing python projects
        run: python -m unittest discover -s ./test
        working-directory: ${{env.project-path}}/${{ matrix.dir }}

      - name: run coverage
        run: |
          pip install coverage
          coverage run -m unittest discover ./test
        working-directory: ${{env.project-path}}/${{ matrix.dir }}

      - name: post job status to discord
        if: always()
        uses: sarisia/actions-status-discord@v1.8.6
        with: 
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nocontext: true
          title: ${{matrix.dir}} status report
          status: ${{job.status}}
          description: |
            Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.

  react-native-job:
    runs-on: ubuntu-latest
    needs: [preliminary-status-report-job]
    env:
      cache-name: cache-node-modules
      project-path: 'src/projects'
      dir: "react-native"
      node-version: 16
      
    steps:
      - name: check out repository
        uses: actions/checkout@v2

      - name: react-native setup; version=${{matrix.node-version}}
        uses: actions/setup-node@v1
        with: 
          node-version: ${{env.node-version}}

      - name: cache dependencies
        id: cache-step
        uses: actions/cache@v2
        with:
            path: ~/.npm
            key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
                ${{ runner.os }}-build-${{ env.cache-name }}-
                ${{ runner.os }}-build-
                ${{ runner.os }}-
                
      - name: install and cache project dependencies
        if: steps.cache-step.outputs.cache-hit != 'true'
        run: |
          npm install
        working-directory: ${{env.project-path}}/${{env.dir}}

      - name: run build
        run: npm run build --if-present # do what is specified in package.json file
        working-directory: ${{env.project-path}}/${{env.dir}}
        
      - name: run lint
        run: |
          npm install eslint --save-dev
          npm run lint
        working-directory: ${{env.project-path}}/${{env.dir}}

      - name: run test
        run: npm test
        working-directory: ${{env.project-path}}/${{env.dir}}

      - name: post job status to discord
        if: always()
        uses: sarisia/actions-status-discord@v1.8.6
        with: 
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nocontext: true
          title: ${{env.dir}} status report
          status: ${{job.status}}
          description: |
            Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.

  web-job:
    runs-on: ubuntu-latest
    needs: [preliminary-status-report-job]
    env:
      cache-name: cache-web-node-modules
      project-path: 'src/projects'
      dir: "web"
      node-version: 16
    
    steps:
      - name: check out repository
        uses: actions/checkout@v2

      - name: web setup; version=${{matrix.node-version}}
        uses: actions/setup-node@v1
        with: 
          node-version: ${{env.node-version}}

      - name: install project dependencies
        run: npm install
        working-directory: ${{env.project-path}}/${{env.dir}}

      - name: run build
        run: npm run build --if-present
        working-directory: ${{env.project-path}}/${{env.dir}}
        
      - name: run lint
        run: npm run lint
        working-directory: ${{env.project-path}}/${{env.dir}}

      - name: run test
        run: npm test
        working-directory: ${{env.project-path}}/${{env.dir}}

      - name: post job status to discord
        if: always()
        uses: sarisia/actions-status-discord@v1.8.6
        with: 
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nocontext: true
          title: ${{env.dir}} status report
          status: ${{job.status}}
          description: |
            Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.

  docker-image-build-job:
    needs: [ python-job, react-native-job ]
    runs-on: ubuntu-latest
    env: 
      src: 'src'
      projects: 'projects'
      
    strategy:
      matrix: { dir: ['reverse-proxy', 'mibs', 'cms', 'keycloak', 'smtp-dev', 'postgres-dev', 'web'] }

    permissions: 
      contents: read
      packages: write 
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      
      - name: Build ${{matrix.path}} docker image
        run: | 
         if [[ ${{matrix.dir}} == 'mibs' || ${{matrix.dir}} == 'cms' || ${{matrix.dir}} == 'web' ]] ; then
           docker build --tag ghcr.io/universityofsaskatchewancmpt371/${{matrix.dir}}:latest --file ${{env.projects}}/${{matrix.dir}}/Dockerfile .
         fi
         exit 0
        shell: bash
        working-directory: ${{env.src}}
        
      - name: Build ${{matrix.path}} docker image
        run: | 
         if [[ ${{matrix.dir}} == 'reverse-proxy' || ${{matrix.dir}} == 'keycloak' || ${{matrix.dir}} == 'postgres-dev' || ${{matrix.dir}} == 'smtp-dev' ]] ; then
           docker build --tag ghcr.io/universityofsaskatchewancmpt371/${{matrix.dir}}:latest --file ${{env.src}}/${{env.projects}}/${{matrix.dir}}/Dockerfile ./${{env.src}}/${{env.projects}}/${{matrix.dir}} 
         fi
         exit 0
        shell: bash
      
      - name: post job status to discord
        if: always()
        uses: sarisia/actions-status-discord@v1.8.6
        with: 
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nocontext: true
          title: ${{matrix.dir}} image status report
          status: ${{job.status}}
          description: |
            Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.















  # publish-status-report-job:
  #   if: always()
  #   needs: [ python-job, react-native-job, docker-image-build-job ]
  #   runs-on: ubuntu-latest
  #   env: 
  #     project-path: 'src/projects'
  #     ci-scripts: ${{ github.workspace }}/'src/tools/ci/scripts'
  #     python-job-stat: ${{needs.python-job.steps.get-status.outputs.status}}
  #   steps:
  #     - name: generate status report
  #       run: |
  #         chmod+x ${{env.ci-scripts}}/status-report-gen.sh
  #         echo ::set-output name=description::$(${{env.ci-scripts}}/status-report-gen.sh)
  #       id: report-gen

  #     - name: post job status to discord
  #       if: always()
  #       uses: sarisia/actions-status-discord@v1.8.6
  #       with: 
  #         webhook: ${{ secrets.DISCORD_WEBHOOK }}
  #         nocontext: true
  #         title: Testing single report
  #         status: ${{needs.python-job.steps.get-status.outputs.status}}
  #         description: ${{steps.report-gen.outputs.description}}
  #           Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.

      # - name: Generate python-flask modules
      #   run : |
      #    if [[ ${{matrix.dir}} == 'cms' || 
      #    ${{matrix.dir}} == 'mibs' ]]; then
      #    npm install @openapitools/openapi-generator-cli -g --save-dev --legacy-peer-deps
      #    openapi-generator-cli generate -i src/tools/api/openapi.yml -g python-flask -o src/lib/${{steps.image-name-gen.outputs.image-name}}
      #    fi
      #    exit 0
      #   shell: bash

#      env:
#        REGISTRY: ghcr.io
#        IMAGE_NAME: ${{ github.repository }}
#          - name: Extract metadata (tags, labels) for Docker
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
# --tag ${{matrix.path}}-${{GITHUB_REF##*/}}-$(date +'%Y-%m-%d-T-%H-%M-%S')


      # - name: get image name
      #   run: echo ::set-output name=image-name::$(echo $(basename "${{matrix.path}}"))
      #   id: image-name-gen

      # - name: post job status to discord
      #   if: always()
      #   uses: sarisia/actions-status-discord@v1.8.6
      #   with: 
      #     webhook: ${{ secrets.DISCORD_WEBHOOK }}
      #     nocontext: true
      #     title: ${{env.dir}} status report
      #     status: ${{job.status}}
      #     description: |
      #       Click [here](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}) to view logs.
      
      
      
# working-directory: ${{env.project-path}}/${{matrix.dir}}
