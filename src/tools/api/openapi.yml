openapi: 3.0.0
security:
  - authenticator
info:
  title: Message In A Bottle Service (MIBS)
  description: Server responsible for handling "messages in a bottle".
  version: 0.0.1
paths:
  /mibs:
    get:
      summary: Returns message(s) in a bottle for the user.
      description: |
        Gets a single MessageInABottle if the messageId is present,
        otherwise if not messageId is present get all MessageInABottle for
        the current user.

            Precondition:
              - User is authorized.
              - If messageId is present then a MessageInABottle with messageId
              must exist for the user

            Postcondition: An list of 0 or more MessageInABottle.
              Case: messageId present.
                A list of 1 MessageInABottle depending.
              Case: messageId is not present.
                A list of 0 or more MessageInABottle. The list will be empty if the
                user has no MessageInABottle.
      operationId: getMessage
      tags:
        - mibs
      parameters:
        - name: messageId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: |
            A JSON array of all MessageInABottle for the user if no
            messageId is specified, otherwise if a messageId is specified, return
            only the MessageInABottle that corresponds to that messageId.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageInABottle'
        '401':
          description: User is not authorized.
        '404':
          description: User does not have a MessageInABottle with a messageId of
            messageId.

    post:
      summary: Creates a message in a bottle for the user.
      description: |
        Persist a new a MessageInABottle for an authorized user.

            Precondition:
              - User is authorized.

            Postconditon:
            - A MessageInABottle is created for the user with the
            supplied detailes and persisted in the database.

            Note: messageId will be ignored if present in the request body.
      operationId: createMessage
      tags:
        - mibs
      requestBody:
        required: true
        description: messageId will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInABottle'
      responses:
        '201':
          description: MessageInABottle was successfully created.
          headers:
            Location:
              schema:
                type: string
              description: '/?messageId=\<new messageId>'

        '400':
          description: Request body does not contain required parameters.
        '401':
          description: User is not authorized.

    put:
      summary: Updates a message in a bottle for the user.
      description: |
        Persist changes to a MessageInABottle for an authorized user.

            Precondition:
              - User is authorized.
              - A MessageInABottle with messageId exists for the user.

            Postconditon: The MessageInABottle with the messageId is updated
            to the supplied MessageInABottle in the request body.
      operationId: updateMessage
      tags:
        - mibs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInABottle'
              required:
                - messageId
      responses:
        '200':
          description: MessageInABottle was updated successfully.
        '400':
          description: Request body does not contain required parameters.
        '401':
          description: User is not authorized.

    delete:
      summary: Deletes message(s) in a bottle for the user.
      description: |
        Deletes a single MessageInABottle or all MessageInABottles
        for an authorized user.

            Precondition:
              - User is authorized.
              - If messageId is present then a MessageInABottle with messageId
                must exist for the user.

            Postcondition: Deletes a single MessageInABottle or all
              MessageInABottles.
              Case: messageId present.
                Deletes a message MessageInABottle with messageId in the database.
              Case: messageId is not present.
                Deletes all MessageInABottles for the user.

      operationId: deleteMessage
      tags:
        - mibs
      parameters:
        - name: messageId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the MessageInABottle
        '401':
          description: User is not authorized.
        '404':
          description: User does not have a MessageInABottle with a messageId of
            messageId.

components:
  schemas:
    MessageInABottle:
      type: object
      properties:
        messageId:
          type: integer
        message:
          type: string
        recipients:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/EmailRecipient'
              - $ref: '#/components/schemas/SmsRecipient'
              - $ref: '#/components/schemas/UserRecipient'
        sendTime:
          type: string
          format: date-time
          description: An ISO-8601 UTC date time string. 2021-10-26T03:14:51.657Z

      required:
       - message
       - recipients
    EmailRecipient:
      type: object
      properties:
        email:
          type: string

    SmsRecipient:
      type: object
      properties:
        phoneNumber:
          type: string

    UserRecipient:
      type: object
      properties:
        userId:
          type: string
  securitySchemes:
    authenticator:
      type: http
      scheme: bearer
      bearerFormat: JWT
